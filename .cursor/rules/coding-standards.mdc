---
description: 
globs: 
alwaysApply: true
---
  You are an expert in JavaScript, TypeScript, React Native, Expo, Firebase, React Native Elements, and Mobile UI development.

  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  - Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

  Component usage:
  - Use `@rneui/base` React Native Elements library for UI components and for theming.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  Importing
  - always import from the index.ts.

  TypeScript Usage
  - Use PascalCase for types and enums. 
  - Use TypeScript for all code; prefer types over interfaces.
  - Use enums whenever necessary.
  - Use functional components with TypeScript types.
  - Use strict mode in TypeScript for better type safety.
  - Use types for props and return.
  - Suffix all type definitions with Type, and all enum with Enum.
  - Use types for navigation.
  - Each component/screen has its own file with types.

  Internationalization usage
  - Add any string to the en.json resource file.
  - Make sure that common, simple strings are on the common namespace.
  - translation property from en.json file contains all the screens, add the strings based on the screen.

  Syntax and Formatting
  - Use concise syntax for simple statements.
  - Use declarative JSX.
  - Use Prettier for consistent code formatting.

  UI and Styling
  - Always use Units from constants/units.ts for sizes.
  - If a unit doesn't exist, please add it on the Units object.
  - Always use Colors from constants/colors.ts.
  - Implement responsive design with Flexbox.
  - Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.

  Performance Optimization
  - Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
  - Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
  - Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

  Navigation
  - Use react-navigation for routing and navigation; follow its best practices for stack and tab navigators.
  - Leverage deep linking and universal links for better user engagement and navigation flow.

  State Management
  - Use zustand for managing global state.
  - Each each property of store slice should have a selector.
  - Always get the store slice property using a selector.

  Error Handling and Validation
  - Use Zod for runtime validation and error handling.
  - Implement proper error logging.
  - Prioritize error handling and edge cases:
    - Handle errors at the beginning of functions.
    - Use early returns for error conditions to avoid deeply nested if statements.
    - Avoid unnecessary else statements; use if-return pattern instead.
    - Implement global error boundaries to catch and handle unexpected errors.

  Testing
  - Write unit tests using Jest and React Native Testing Library.
  - Consider snapshot testing for components to ensure UI consistency.
  - use `screen` from `@testing-library/react-native` instead of the return of `render`.
  - never mock components or functions, only libraries or services, if it's needed.
  - write tests and that that actually go through flows, imagine you're a user that uses the app:
   - check if all the strings are displayed on the screen, import `i18n` from `@/config/i18n`, never mock `react-i18next` or `useTranslation`, always check if a text exists by pointing to `i18n`.
   - if there are textinputs on the screen, fire an `onChange` event and add a text to it.
   - if there are modals or bottom sheets, open them and check if the text is visible.
   - if there are buttons click on them and check the expected result.
   - if there are selectable items click on them and make sure they are selected. They are selected when they have this suffix `_Selected` on testID.
   - always check if functions are called with the right values.
   - try to have high test coverage.
   - take `@/screens/private/add-happening/screens/happening-requirements/happening-requirements.test.tsx` as an example.
   - each component from `@/common/components` has a testID added, it merges the testID received from the props and appends to it the name of the component: `${props.testID}_TopBar`. Checkout how each testID is composed in order to be able to get the right testID.
   - if a tests failed because it found multiple elements, query them all and expect they are a specific number.
  - after the tests are written, please run them, and fix them in case they fail.

